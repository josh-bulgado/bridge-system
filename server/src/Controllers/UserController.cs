
using Microsoft.AspNetCore.Mvc;
using QRCoder;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using server.Models;
using server.Services;

namespace MongoBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UserController : ControllerBase
    {
        private readonly UserService _userService;

        public UserController(UserService userService)
        {
            _userService = userService;
        }

        [HttpGet]
        public async Task<List<User>> Get() =>
            await _userService.GetAsync();

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] User user)
        {
            await _userService.CreateAsync(user);
            return CreatedAtAction(nameof(Get), new { id = user.Id }, user);
        }

        [HttpGet("qr/{id}")]
        public async Task<IActionResult> GetQrById(string id)
        {
            var user = await _userService.GetByIdAsync(id);
            if (user == null)
                return NotFound($"User with id {id} not found.");

            // Data to encode
            string qrData = $"https://localhost:5173/user/{id}";
            // (Later, use your real frontend route like: https://localhost:5173/user/{id})

            // Generate QR using ImageSharp
            using var qrGenerator = new QRCodeGenerator();
            using var qrDataObj = qrGenerator.CreateQrCode(qrData, QRCodeGenerator.ECCLevel.Q);

            // ✅ PngByteQRCode (ImageSharp-based renderer)
            var qrCode = new PngByteQRCode(qrDataObj);
            byte[] qrBytes = qrCode.GetGraphic(20); // 20 = pixel size per module

            // Return PNG file directly
            return File(qrBytes, "image/png");
        }

        [HttpGet("pdf/{id}")]
        public async Task<IActionResult> GetCertificatePdf(string id)
        {
            var user = await _userService.GetByIdAsync(id);
            if (user == null)
                return NotFound($"User with id {id} not found.");

            // Generate QR
            string qrData = $"http://localhost:5173/verify/{id}";
            using var qrGenerator = new QRCodeGenerator();
            using var qrDataObj = qrGenerator.CreateQrCode(qrData, QRCodeGenerator.ECCLevel.Q);
            var qrCode = new PngByteQRCode(qrDataObj);
            var qrBytes = qrCode.GetGraphic(20);

            // Generate PDF
            var pdf = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    // Header
                    page.Header()
                        .AlignCenter()
                        .Text("Republic of the Philippines")
                        .Bold()
                        .FontSize(18);

                    // Body
                    page.Content().Column(col =>
                    {
                        col.Spacing(15);
                        col.Item().Text("iDaan Life Record Certificate")
                            .Bold()
                            .FontSize(16);

                        col.Item().Text($"User ID: {user.Id}");
                        col.Item().Text($"Email: {user.Email}");
                        col.Item().Text($"Date Issued: {DateTime.Now:MMMM dd, yyyy}");

                        // Embed QR on the right
                        col.Item().AlignRight().Image(qrBytes);
                    });

                    // Footer
                    page.Footer()
                        .AlignCenter()
                        .Text("Digitally generated by iDaan — for academic simulation only.");
                });
            }).GeneratePdf();

            return File(pdf, "application/pdf", $"iDaan_Certificate_{user.Id}.pdf");
        }
    }
}
